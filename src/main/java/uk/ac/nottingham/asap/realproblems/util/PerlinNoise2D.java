package uk.ac.nottingham.asap.realproblems.util;

import java.util.Random;

/**
 *
 * @author vinicius
 */
public class PerlinNoise2D {

    public static int psize = 256;
    public int m_levels;
    public double m_amplitudeDecay;
    private int[] m_permutation;
    private double[] m_value;

    public PerlinNoise2D(int m_levels, Random rng) {
        //rng.setSeed(PseudoRandom.getInstance().getSeed());
        m_permutation = new int[psize];
        m_value = new double[psize];
        this.m_levels = m_levels;
        this.m_amplitudeDecay = 0.5;
        for (int i = 0; i < psize; i++) {
            m_value[i] = rng.nextGaussian();
        }
        for (int i = 0; i < psize; i++) {
            m_permutation[i] = i;
        }
        for (int i = 1; i < psize; i++) {
            swap(m_permutation, i, rng.nextInt(psize));
        }
    }

    private void generateSameRandomUsedInC(int tipo) {
        if(tipo==1){
            double[] gaussian = {2.48606, -1.78615, -0.787009, 0.598398, 0.0130147, 0.210938, -1.19665, -1.49886, -1.08908, -0.104494, -0.687534, 0.771854, -0.571407, -1.95122, -2.06538, 0.64202, 1.16219, 0.238947, -1.33497, -0.204432, -0.664124, 0.3086, -0.896295, -0.135893, 1.1481, 0.513347, 0.625802, 2.24726, 1.54087, 0.250958, -2.17635, -0.839885, -0.414407, -1.56714, -0.233069, 0.262459, 0.830592, -0.118402, -0.789219, -2.36191, 2.12445, 2.31477, -1.86176, -0.527186, -0.19201, -1.56519, 0.0959439, 2.17622, 1.58022, 0.427116, -0.399768, 0.811938, -1.04096, 1.18759, -0.327644, -0.15553, 0.602629, -0.770021, -1.79112, -2.17364, -1.73532, -0.164339, 0.257761, -0.503751, 0.337707, -0.0629981, 0.454272, 0.484951, 1.8928, 0.199204, -1.61622, -1.11821, -0.0651943, -1.63252, -1.7119, 0.238576, -2.41007, 0.300958, -1.55446, 1.19649, -1.36319, 0.258149, -0.178437, 0.403518, -1.41725, -0.946326, -1.74772, 1.39685, 0.275708, -2.2209, 0.306904, -0.402102, 0.798103, -1.21508, -0.205502, -1.064, -1.04267, -0.627784, -1.19767, -1.60138, -0.097258, -1.87574, 0.0194173, 0.0972817, -0.728128, -0.937911, 0.67401, -0.575852, 0.2954, -0.0945548, -0.201898, 1.04256, 1.7027, -0.857395, 1.30598, -0.442132, 0.591429, 0.17412, 1.4573, -1.09232, 0.608034, -0.763651, 0.460048, -2.04634, 0.459738, -0.518519, -2.60065, 0.149904, -0.00891393, 0.0919809, -0.517566, 1.01902, -1.01796, 0.406401, 2.34973, -1.30393, -1.32754, -0.712, -0.864933, 0.0189375, 0.0225126, -0.257189, -0.410472, -1.37298, 0.776954, 1.18252, 0.61439, -1.19234, -1.15937, -0.394929, 3.09641, -2.28547, 0.0988374, -0.59352, 1.02912, 0.387612, -0.656512, -1.17132, -1.10012, 1.44409, -1.23085, -1.29079, -0.0219156, 0.552054, 0.520969, 0.0597937, 0.311981, 0.807536, 0.95717, 0.298261, 0.406433, 1.20779, -0.534686, 0.0512609, 0.739871, 1.42462, -0.00775691, 1.54794, 0.0657982, -0.373845, -0.677527, -0.465868, -1.19704, 1.72621, 0.442887, 0.930596, 0.125934, 1.00548, 0.377828, -0.0193846, -0.797901, -1.17606, -0.6742, -0.0739785, -0.439161, 1.59434, -1.49967, -1.41112, -2.66605, -0.72679, -1.75516, -0.0504465, 0.804481, 1.43231, -0.0850514, -0.865959, -1.41648, -0.353305, 1.2256, -0.485283, 0.0683152, 0.810165, 1.21153, 0.523819, -2.32703, 0.746808, -1.08241, 1.13834, 0.48711, -0.33079, -0.173512, 0.669353, -0.872327, -0.768147, -1.06794, -0.372763, -0.678218, 0.866488, 1.53431, -0.861774, -0.659092, 0.0376255, -1.84631, 0.0584327, -0.968869, -0.693674, 1.15965, -0.482591, -0.327009, 1.51354, -0.0859986, -1.03694, 1.12432, -1.66859, 2.06064, 0.36481, 0.18648, -0.647638, -0.287075, 0.930202, -0.736745, -1.58613, -0.153918, 0.136323, 0.14194, 1.06489};
            int[] discretes = {48, 240, 132, 105, 55, 33, 81, 77, 144, 39, 227, 194, 170, 53, 1, 141, 231, 66, 44, 232, 61, 218, 88, 96, 919849850, 113, 101, 22, 36, 241, 212, 32, 79, 34, 104, 82, 173, 50, 68, 95, 90, 14, 210, 185, 149, 100, 107, 99, 23, 120, 15, 239, 65, 69, 235, 72, 244, 115, 246, 165, 59, 73, 248, 133, 102, 27, 67, 222, 164, 155, 126, 154, 108, 158, 249, 97, 37, 110, 225, 167, 7, 45, 93, 47, 103, 127, 184, 135, 159, 26, 10, 197, 253, 13, 198, 41, 236, 118, 157, 142, 49, 80, 28, 114, 92, 121, 128, 152, 148, 237, 178, 116, 177, 145, 209, 54, 58, 17, 189, 190, 151, 179, 199, 215, 109, 153, 131, 136, 230, 202, 204, 168, 250, 191, 125, 163, 87, 46, 224, 176, 31, 38, 76, 70, 220, 211, 86, 200, 139, 62, 161, 226, 18, 238, 206, 138, 74, 229, 160, 122, 30, 172, 175, 71, 183, 181, 188, 201, 40, 186, 2, 217, 207, 78, 16, 129, 182, 196, 75, 91, 174, 228, 94, 143, 57, 25, 51, 5, 208, 150, 205, 192, 42, 180, 98, 221, 4, 245, 85, 146, 111, 6, 3, 193, 117, 252, 214, 166, 216, 223, 119, 63, 195, 169, 20, 243, 171, 106, 12, 255, 35, 21, 89, 29, 213, 56, 124, 60, 203, 137, 156, 187, 147, 0, 9, 8, 254, 134, 130, 219, 11, 234, 233, 162, 112, 140, 247, 43, 52, 83, 123, 64, 242, 19, 84, 251};
            m_value=gaussian;
            m_permutation=discretes;
        }
        else{
            double[] gaussian = {0.985829, 0.412765, -1.54243, -0.0582445, 0.187564, 0.281367, -2.53553, 0.275182, 0.695982, -2.30001, 0.20034, -0.15272, 0.611578, 0.083403, 0.817205, 0.428072, -1.62941, -0.422413, 0.563894, 0.452183, -0.804154, -0.405966, 0.938241, -0.0799826, 0.71515, 2.31413, -0.543374, 1.65616, -0.393195, 0.528925, 0.112191, -0.000896965, 0.365738, 1.04956, -0.913951, 0.517918, 0.546497, 1.06671, -0.0782702, 0.556111, 1.66077, 0.183908, -0.577217, 0.523008, 0.176004, -0.576586, 0.319998, 2.04178, 0.103162, -0.567335, -1.55369, 0.615797, 0.848936, -0.141347, -0.0984318, 0.0264997, 0.740462, -0.591339, 0.24462, -0.974002, 1.08246, -1.58211, 0.123442, -0.518256, 1.11669, -1.33171, 0.656875, 1.15417, -0.186958, 1.53984, -0.850148, 1.09134, -0.443895, 0.233999, -1.23573, -1.33256, 0.230407, -0.582775, 1.83727, -0.24044, 0.107823, -0.851622, -1.06175, 0.941258, -1.92133, -0.231518, -0.776368, 1.00596, 0.776311, -0.502658, -0.412777, -0.586864, 0.0818108, -0.825498, 0.0907914, -3.00313, 0.789668, -1.16323, -1.38531, -0.276331, 1.8048, -0.27165, -0.1629, -0.163118, -2.84326, -0.358758, -1.5529, 1.3323, 0.863421, -2.57776, 0.689405, -0.339773, -2.08624, -0.13153, 0.809055, -1.44778, -0.267431, -1.27238, -2.19052, 0.532242, -0.572707, -1.06384, -0.537117, 0.199333, 1.32054, 0.252349, -3.35435, 0.512163, 0.156884, 1.37419, -1.12734, -0.903981, 0.970555, -1.5246, -0.797204, 0.326243, -0.718941, 0.267694, -1.12581, -1.28959, -0.313875, -1.29425, -0.559083, 0.581505, 0.647627, 0.0270007, -0.254827, -1.21912, 1.29268, 0.807503, -0.459506, 1.378, 1.35341, -0.974997, 0.43613, -1.03523, -1.80415, -0.303347, 2.42922, -2.17876, -1.1789, -0.594649, -0.5709, -1.07024, -0.535165, 0.173302, -0.258092, 0.857163, 0.14769, -0.232302, 0.611554, -1.02862, -0.0823832, -0.552323, -0.0310385, 0.563439, 0.243033, -0.760963, 0.285948, 0.451774, -0.6449, -0.13483, -0.294684, 0.399258, -2.00841, 1.31692, -0.424918, 0.883497, 0.0127797, -1.18454, -0.0058636, -0.326548, 0.370723, -1.20859, -0.463608, -0.144571, -0.551596, 1.09344, -1.03434, -1.48198, -0.816007, -0.157765, -1.17525, -1.17123, 0.0198347, 1.23962, -0.878058, -0.456838, -0.747898, -0.652812, -0.195192, -0.951197, -1.04814, -0.281037, -0.0959368, 0.842387, -1.08954, 1.13296, 0.359313, 1.03915, -0.728021, -1.29579, 0.970404, 0.434467, -0.508881, 0.597268, 0.643547, 1.43427, 1.8302, 0.423636, -2.92361, -1.29463, 0.461718, -0.225663, 1.96726, -0.357053, -0.192202, -1.53141, -1.81338, -0.582915, 2.91423, 0.140789, 0.278694, -0.0794022, -0.150096, -0.577752, -0.814665, -0.872537, 1.15644, 0.817915, -1.26451, 0.482695, -0.799995, -0.16611, -0.303838, -0.590764};
            int[] discretes = {180, 194, 243, 126, 160, 232, 230, 26, 63, 71, 190, 94, 238, 100, 211, 164, 146, 76, 92, 143, 157, 138, 159, 9, 177, 225, 21, 66, 86, 51, 59, 123, 219, 93, 183, 68, 48, 37, 218, 83, 54, 80, 32, 251, 87, 163, 182, 91, 53, 129, 110, 73, 4, 79, 29, 156, 200, 121, 248, 117, 150, 227, 61, 153, 99, 47, 65, 233, 195, 103, 85, 36, 78, 122, 102, 136, 250, 60, 222, 88, 158, 46, 120, 213, 57, 210, 16, 171, 234, 185, 33, 118, 90, 192, 125, 95, 214, 106, 19, 179, 124, 189, 198, 114, 107, 45, 23, 141, 18, 202, 173, 30, 137, 253, 224, 22, 152, 212, 229, 1, 204, 246, 174, 7, 134, 145, 55, 14, 127, 49, 62, 196, 247, 199, 135, 28, 111, 166, 191, 169, 75, 104, 217, 133, 188, 96, 170, 206, 24, 12, 149, 181, 154, 84, 10, 209, 130, 34, 8, 74, 208, 109, 0, 42, 220, 101, 97, 221, 105, 72, 43, 128, 215, 64, 116, 242, 108, 2, 148, 11, 82, 98, 197, 254, 112, 144, 115, 245, 193, 231, 35, 178, 113, 172, 216, 168, 226, 252, 249, 58, 151, 140, 187, 147, 162, 38, 132, 41, 175, 25, 223, 77, 5, 139, 155, 167, 237, 89, 165, 81, 40, 207, 119, 236, 228, 6, 27, 44, 241, 20, 67, 50, 186, 70, 240, 184, 201, 239, 56, 205, 203, 52, 13, 15, 176, 31, 3, 69, 17, 244, 131, 255, 142, 161, 235, 39};
            m_value=gaussian;
            m_permutation=discretes;
        }
    }

    private void swap(int[] array, int i, int j) {
        int vali = array[i];
        array[i] = array[j];
        array[j] = vali;
    }

    public double operation(double x, double y) {
        x -= psize * Math.floor(x / psize);
        y -= psize * Math.floor(y / psize);
        double ret = 0.0;
        double a = 1.0;
        for (int l = 0; l < m_levels; l++) {
            a *= m_amplitudeDecay;
            ret += a * primitive(x, y);
            x *= 2.0;
            y *= 2.0;
            if (x >= psize) {
                x -= psize;
            }
            if (y >= psize) {
                y -= psize;
            }
        }
        return ret;
    }

    public double amplitideDecay() {
        return m_amplitudeDecay;
    }

    public void setAmplitideDecay(double decay) {
        m_amplitudeDecay = decay;
    }

    public double vertex(int x, int y) {
        return m_value[(x + m_permutation[y]) % psize];
    }

    public double spline(double t) {
        return 3.0 * t * t - 2.0 * t * t * t;
    }

    public double interpolate(double v, double w, double t) {
        double s = spline(t);
        return (1.0 - s) * v + s * w;
    }

    public double primitive(double x, double y) {
        // lower and upper indices
        int xl = (int) Math.floor(x);
        int xu = (xl + 1) % psize;
        int yl = (int) Math.floor(y);
        int yu = (yl + 1) % psize;
        // remainders
        double xr = x - xl;
        double yr = y - yl;
        // grid values
        double a = vertex(xl, yl);
        double b = vertex(xu, yl);
        double c = vertex(xl, yu);
        double d = vertex(xu, yu);
        // interpolation
        return interpolate(interpolate(a, b, xr), interpolate(c, d, xr), yr);
    }

    public double pd_operation(double x1, double x2) {
        this.generateSameRandomUsedInC(1);
        return Math.exp(-10.0 * ((x1 - 0.5) * (x1 - 0.5) + (x2 - 0.5) * (x2 - 0.5))) * Math.exp(operation(x1, x2));
    }

    public double ic_operation(double x1, double x2) {
        this.generateSameRandomUsedInC(2);
        return Math.exp(operation(x1, x2));
    }

}
